/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    behaviors {
        td: td {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp F  &kp P  &kp V    &kp J  &kp L  &kp U                  &kp Y      &kp BACKSPACE
&kp A             &kp R           &kp S  &kp T  &kp G    &kp M  &kp N  &kp E                  &kp I      &kp O
&kp Z             &kp X           &kp C  &kp D  &kp V    &kp K  &kp H  &mt COMMA EXCLAMATION  &kp DOT    &kp SLASH
&kp LEFT_CONTROL  &sk LEFT_SHIFT                                                              &kp SPACE  &to 1
            >;
        };

        left_layer {
            bindings = <
&kp ESC    &kp AT_SIGN     &kp HASH           &kp DOLLAR         &kp PERCENT        &kp CARET                  &kp AMPERSAND         &kp ASTERISK           &td COLON SEMICOLON   &kp BACKSPACE
&kp TAB    &kp LC(EQUAL)   &kp SQT            &kp SINGLE_QUOTE   &kp SQT            &td HOME NON_US_BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &td END PIPE          &kp ENTER
&kp GRAVE  &kp TILDE       &kp DOUBLE_QUOTES  &kp DOUBLE_QUOTES  &kp PRINTSCREEN    &sk RIGHT_ALT              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &td MINUS UNDERSCORE  &to 2
&to 0      &sk LEFT_SHIFT                                                                                                                                   &kp SPACE             &to 3
            >;
        };

        right_layer {
            bindings = <
&kp BANG  &kp AT     &kp HASH  &kp DLLR  &kp PERCENT    &kp CARET  &kp AMPS      &kp ASTERISK  &kp LPRN  &kp RPRN
&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN       &kp MINUS  &kp KP_EQUAL  &kp LBRC      &kp RBRC  &kp BKSP
&kp LSFT  &kp KPLS   &kp LBKT  &kp RBKT  &kp BSLH       &kp UNDER  &kp LEFT      &kp DOWN      &kp UP    &kp RIGHT
&to 0     &kp LCTL                                                                             &kp SPC   &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp ESCAPE  &kp F1          &kp F2      &kp F3  &kp MINUS     &kp MINUS  &kp N7  &kp N8  &kp N9     &kp BACKSPACE
&kp TAB     &kp F2          &kp F3      &kp F4  &kp PLUS      &kp EQUAL  &kp N4  &kp N5  &kp N6     &kp ENTER
&to 4       &bt BT_NXT      &bt BT_PRV  &kp F6  &kp PERIOD    &kp N0     &kp N1  &kp N2  &kp N3     &to 2
&to 0       &sk LEFT_SHIFT                                                               &kp SPACE  &to 1
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
