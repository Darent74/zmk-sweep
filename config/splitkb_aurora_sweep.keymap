/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "tap-preferred";
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        td: td {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp F  &kp P  &kp B    &mt INSERT J  &kp L  &kp U           &kp Y             &kp BACKSPACE
&kp A             &kp R           &kp S  &kp T  &kp G    &kp M         &kp N  &kp E           &kp I             &kp O
&kp Z             &kp X           &kp C  &kp D  &kp V    &kp K         &kp H  &td PIPE COMMA  &td UNDER PERIOD  &td MINUS SLASH
&kp LEFT_CONTROL  &sk LEFT_SHIFT                                                              &kp SPACE         &to 1
            >;
        };

        left_layer {
            bindings = <
&kp ESC                 &kp AT_SIGN           &kp HASH           &kp DOLLAR         &kp PERCENT        &kp CARET                  &kp AMPERSAND         &kp ASTERISK           &td COLON SEMICOLON   &kp BACKSPACE
&kp TAB                 &kp LC(LS(EQUAL))     &kp LC(MINUS)      &kp SINGLE_QUOTE   &kp DEL            &td HOME NON_US_BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &td END PIPE          &kp ENTER
&mt LEFT_CONTROL GRAVE  &kp NON_US_BACKSLASH  &kp DOUBLE_QUOTES  &kp DOUBLE_QUOTES  &kp EXCLAMATION    &sk RIGHT_ALT              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &td MINUS UNDERSCORE  &to 2
&to 0                   &sk LEFT_SHIFT                                                                                                                                         &kp SPACE             &to 3
            >;
        };

        right_layer {
            bindings = <
&kp ESC    &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_MUTE  &kp C_VOLUME_UP    &kp LC(LS(TAB))  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LC(TAB)  &kp BACKSPACE
&kp TAB    &kp C_PREV         &kp C_STOP        &kp C_NEXT  &kp DELETE         &kp LEFT_ARROW   &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT    &kp RETURN
&kp LC(Z)  &kp LC(X)          &kp LC(C)         &none       &kp LC(V)          &kp INS          &kp PAGE_DOWN       &kp PAGE_UP          &kp LC(Y)    &to 3
&to 0      &sk LEFT_SHIFT                                                                                                                &kp SPACE    &to 1
            >;
        };

        tri_layer {
            bindings = <
&kp ESCAPE  &none           &kp SLASH   &mt COMMA PERIOD  &kp MINUS    &kp SLASH   &kp N7  &kp N8  &kp N9     &kp BACKSPACE
&kp TAB     &mt F10 F4      &mt F11 F5  &mt F12 F6        &kp PLUS     &kp PERIOD  &kp N4  &kp N5  &kp N6     &kp ENTER
&mo 4       &mt F7 F1       &mt F8 F2   &mt F9 F3         &kp EQUAL    &kp N0      &kp N1  &kp N2  &kp N3     &to 2
&to 0       &sk LEFT_SHIFT                                                                         &kp SPACE  &to 1
            >;
        };

        layer_4 {
            bindings = <
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3    &none   &bt BT_CLR  &none   &none   &trans
&trans  &bt BT_NXT     &bt BT_PRV     &none         &bt BT_SEL 4    &none   &none       &none   &none   &trans
&none   &bt BT_DISC 0  &bt BT_DISC 1  &none         &none           &trans  &trans      &trans  &trans  &none
&to 0   &none                                                                                   &trans  &none
            >;
        };
    };
};
